// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "getDataService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/server/TServer.h>
#include <thrift/server/TNonblockingServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <vector>
#include <string>
#include <fstream>
#include <iostream>
#include <set>
#include <stdlib.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::Test;

class getDataServiceHandler : virtual public getDataServiceIf {
 public:
  getDataServiceHandler() {
    
  }

  void getData(std::vector<std::string> & _return, const std::string& filename) {
 std::set<std::string>data;

 std::string line1;
 std::string line2;
 std::string line3;
 system("sh merge.sh");
 std::ifstream file1(("sub1/"+filename).c_str());
 std::ifstream file2(("sub2/"+filename).c_str());
 std::ifstream file3(("sub3/"+filename).c_str());


if(file1){
while(!file1.eof()){
 getline(file1,line1);
 data.insert(line1+"\n");
}
}else
      _return.push_back("File not found in sub1\n");  

if(file2){
while(!file2.eof()){
 getline(file2,line2);
data.insert(line2+"\n");
}
}else
      _return.push_back("File not found in sub2\n");  

if(file3){
while(!file3.eof()){
 getline(file3,line3);
data.insert(line3+"\n");
}
}else
      _return.push_back("File not found in sub3\n");  




file1.close();
file2.close();
file3.close();


std::copy(data.begin(), data.end(), std::back_inserter(_return));


}

  

};


int main(int argc, char **argv) {
  int port = 9090;
  ::apache::thrift::stdcxx::shared_ptr<getDataServiceHandler> handler(new getDataServiceHandler());
  ::apache::thrift::stdcxx::shared_ptr<TProcessor> processor(new getDataServiceProcessor(handler));
  ::apache::thrift::stdcxx::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::apache::thrift::stdcxx::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::apache::thrift::stdcxx::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  ::apache::thrift::server::TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}





